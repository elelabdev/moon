---
import BaseLayout from "../../../layouts/BaseLayout.astro";
import Spacer from "../../../components/Spacer.astro";
---
<BaseLayout title="onprem-web-01" subtitle="Overview of the Virtual Private Server" backHref="/bare-metals/vps">
  <Spacer size={16} />
  <div class="grid grid-cols-1 gap-6 md:grid-cols-3">
    <div class="app-card md:col-span-1">
      <div class="app-card-body">
        <h2 class="app-card-title">VPS Specifications</h2>
        <div class="mt-2 grid grid-cols-1 gap-2 text-sm">
          <div class="flex justify-between"><span class="opacity-70">ID</span><span>vps-000123</span></div>
          <div class="flex justify-between"><span class="opacity-70">Name</span><span>onprem-web-01</span></div>
          <div class="flex justify-between"><span class="opacity-70">Public IPs</span><span>203.0.113.24</span></div>
          <div class="flex justify-between"><span class="opacity-70">Internal IP</span><span>10.0.4.21</span></div>
          <div class="flex justify-between"><span class="opacity-70">State</span><span class="badge badge-success badge-field w-28 justify-center">Running</span></div>
          <div class="flex justify-between"><span class="opacity-70">OS</span><span>Ubuntu 22.04 LTS</span></div>
          <div class="flex justify-between"><span class="opacity-70">Storage</span><span>120 GB NVMe</span></div>
          <div class="flex justify-between"><span class="opacity-70">CPU</span><span>4 vCPU</span></div>
          <div class="flex justify-between"><span class="opacity-70">RAM</span><span>8 GB</span></div>
          <div class="flex justify-between"><span class="opacity-70">Data Center</span><span>dc-eu-west</span></div>
          <div class="flex justify-between"><span class="opacity-70">Room</span><span>Room A</span></div>
          <div class="flex justify-between"><span class="opacity-70">Rack</span><span>Rack 12-A</span></div>
        </div>
      </div>
    </div>
    <div class="app-card md:col-span-1">
      <div class="app-card-body">
        <h2 class="app-card-title">Quick Actions</h2>
        <div class="mt-3 grid grid-cols-2 gap-3">
          <button class="btn">Connect</button>
          <button class="btn btn-outline">Stop</button>
          <button class="btn btn-outline">Reboot</button>
          <button class="btn btn-outline">Reinstall</button>
        </div>
      </div>
    </div>
    <div class="app-card md:col-span-1">
      <div class="app-card-body">
        <h2 class="app-card-title">Support</h2>
        <p class="mt-2 text-sm opacity-80">Need help with this VPS?</p>
        <a href="/support" class="btn mt-3 w-full">Open a support request</a>
      </div>
    </div>
  </div>

  <Spacer size={16} />

  <div class="app-card">
    <div class="app-card-body">
      <div class="mb-2 flex flex-wrap items-center justify-between gap-2">
        <h2 class="app-card-title">Metrics</h2>
        <div class="flex flex-wrap items-center gap-2">
          <button class="btn btn-sm btn-active" data-range="minute">Minute</button>
          <button class="btn btn-sm" data-range="hour">Hour</button>
          <button class="btn btn-sm" data-range="day">Day</button>
          <button class="btn btn-sm" data-range="week">Week</button>
          <button class="btn btn-sm" data-range="month">Month</button>
          <button class="btn btn-sm" data-range="year">Year</button>
        </div>
      </div>
      <div class="grid grid-cols-1 gap-6 md:grid-cols-2">
        <div>
          <div class="mb-2 text-sm font-medium">CPU</div>
          <div class="relative rounded-lg border border-base-200 bg-base-100 p-3">
            <div id="mCpu" class="h-48 w-full"></div>
          </div>
        </div>
        <div>
          <div class="mb-2 text-sm font-medium">RAM</div>
          <div class="relative rounded-lg border border-base-200 bg-base-100 p-3">
            <div id="mRam" class="h-48 w-full"></div>
          </div>
        </div>
        <div>
          <div class="mb-2 text-sm font-medium">Disk</div>
          <div class="relative rounded-lg border border-base-200 bg-base-100 p-3">
            <div id="mDisk" class="h-48 w-full"></div>
          </div>
        </div>
        <div>
          <div class="mb-2 text-sm font-medium">Network</div>
          <div class="relative rounded-lg border border-base-200 bg-base-100 p-3">
            <div id="mNet" class="h-48 w-full"></div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <Spacer size={16} />

  <div class="app-card">
    <div class="app-card-body">
      <h2 class="app-card-title">Management</h2>
      <div class="overflow-x-auto">
        <table class="table w-full">
          <thead>
            <tr>
              <th class="text-xs">Section</th>
              <th class="text-xs text-right">Action</th>
            </tr>
          </thead>
          <tbody class="text-sm">
            <tr><td>Network setup</td><td class="text-right"><a href="#" class="btn btn-sm">Open</a></td></tr>
            <tr><td>Security</td><td class="text-right"><a href="#" class="btn btn-sm">Open</a></td></tr>
            <tr><td>Snapshot</td><td class="text-right"><a href="#" class="btn btn-sm">Open</a></td></tr>
            <tr><td>Recovery</td><td class="text-right"><a href="#" class="btn btn-sm">Open</a></td></tr>
            <tr><td>Activity logs</td><td class="text-right"><a href="#" class="btn btn-sm">Open</a></td></tr>
            <tr><td>Notifications</td><td class="text-right"><a href="#" class="btn btn-sm">Open</a></td></tr>
          </tbody>
        </table>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
  <script is:inline>
    // ApexCharts for metrics with X/Y axis info
    const ranges = ['minute','hour','day','week','month','year'];
    let current = 'minute';

    const lengthMap = { minute: 60, hour: 60, day: 24, week: 7, month: 30, year: 12 };
    const stepMs = { minute: 1000, hour: 60_000, day: 60*60_000, week: 24*60*60_000, month: 24*60*60_000, year: 30*24*60*60_000 };

    function genSeries(range, base, spread){
      const len = lengthMap[range];
      const now = Date.now();
      const delta = stepMs[range];
      const start = now - (len-1)*delta;
      const pts = [];
      for (let i=0;i<len;i++){
        const t = start + i*delta;
        const noise = (Math.sin(i/3)+1)/2 * spread + (Math.random()*spread*0.3);
        pts.push([t, Math.max(0, base + noise - spread*0.15)]);
      }
      return pts;
    }

    const charts = {
      cpu: null,
      ram: null,
      disk: null,
      net: null,
    };

    function getThemeMode(){
      const t = document.documentElement.getAttribute('data-theme');
      return t === 'dark' ? 'dark' : 'light';
    }
    function makeOptions(title, yTitle, unit, color){
      const mode = getThemeMode();
      const fore = mode === 'dark' ? '#cbd5e1' : '#334155';
      const gridColor = mode === 'dark' ? 'rgba(148,163,184,0.20)' : 'rgba(148,163,184,0.25)';
      return {
        chart: { type: 'area', height: '100%', toolbar: { show: false }, animations: { enabled: true }, background: 'transparent' },
        stroke: { curve: 'smooth', width: 2 },
        dataLabels: { enabled: false },
        fill: { type: 'gradient', gradient: { shadeIntensity: 0.4, opacityFrom: 0.4, opacityTo: 0.05 } },
        colors: [color],
        xaxis: { type: 'datetime', title: { text: 'Time' }, labels: { style: { colors: fore } }, axisBorder: { color: gridColor }, axisTicks: { color: gridColor } },
        yaxis: { title: { text: yTitle }, labels: { formatter: (v) => `${v.toFixed(1)}${unit}`, style: { colors: fore } } },
        tooltip: { theme: mode, x: { format: 'HH:mm MMM dd' }, y: { formatter: (v)=> `${v.toFixed(2)}${unit}` } },
        grid: { borderColor: gridColor },
        theme: { mode },
        series: [{ name: title, data: [] }],
      };
    }

    function renderAll(){
      const cpuData = genSeries(current, 2.2, 1.2);   // GHz
      const ramData = genSeries(current, 4.0, 3.0);   // GB
      const diskData = genSeries(current, 1500, 1200); // IOPS
      const netData = genSeries(current, 80, 60);     // Mbps

      const cpuEl = document.querySelector('#mCpu');
      const ramEl = document.querySelector('#mRam');
      const diskEl = document.querySelector('#mDisk');
      const netEl = document.querySelector('#mNet');

      const configs = [
        { key: 'cpu', el: cpuEl, title: 'CPU', y: 'GHz', unit: ' GHz', color: '#0ea5e9', data: cpuData },
        { key: 'ram', el: ramEl, title: 'RAM', y: 'GB', unit: ' GB', color: '#22c55e', data: ramData },
        { key: 'disk', el: diskEl, title: 'Disk', y: 'IOPS', unit: ' IOPS', color: '#f59e0b', data: diskData },
        { key: 'net', el: netEl, title: 'Network', y: 'Mbps', unit: ' Mbps', color: '#a78bfa', data: netData },
      ];

      configs.forEach(cfg => {
        if (!cfg.el) return;
        const opts = makeOptions(cfg.title, cfg.y, cfg.unit, cfg.color);
        opts.series[0].data = cfg.data;
        if (charts[cfg.key]) { charts[cfg.key].updateOptions(opts, true, true); }
        else { charts[cfg.key] = new ApexCharts(cfg.el, opts); charts[cfg.key].render(); }
      });
    }

    document.querySelectorAll('button[data-range]')?.forEach((b)=>{
      b.addEventListener('click', ()=>{
        document.querySelectorAll('button[data-range]')?.forEach(x=>x.classList.remove('btn-active'));
        b.classList.add('btn-active');
        current = b.getAttribute('data-range') || 'hour';
        renderAll();
      });
    });

    // react to theme changes
    const obs = new MutationObserver((muts)=>{
      for (const m of muts) if (m.type==='attributes' && m.attributeName==='data-theme') { renderAll(); }
    });
    obs.observe(document.documentElement, { attributes: true });

    // initial render
    renderAll();
  </script>
</BaseLayout>
