---
import BaseLayout from "../../layouts/BaseLayout.astro";
import Spacer from "../../components/Spacer.astro";
// Load markdown bulletins (for now) â€“ later we can swap to API
const bulletins = (await Astro.glob("../../content/status/*.md")).sort((a, b) => {
  const da = new Date(a.frontmatter.date || 0).getTime();
  const db = new Date(b.frontmatter.date || 0).getTime();
  return db - da;
});
const badgeFor = (status: string) => {
  const s = status.toLowerCase();
  if (s.includes('degrad')) return 'badge-warning';
  if (s.includes('resolv') || s.includes('operational')) return 'badge-success';
  if (s.includes('plan')) return 'badge-info';
  if (s.includes('outage') || s.includes('major') || s.includes('incident')) return 'badge-error';
  return 'badge';
};
---
<BaseLayout title="System Status" subtitle="Overview of system status">
  <div class="app-card">
    <div class="app-card-body">
      <div class="mb-3 flex flex-wrap items-center justify-between gap-2">
        <h2 class="app-card-title">Incidents Overview</h2>
        <div class="flex flex-wrap items-center gap-2">
          <button class="btn btn-sm btn-active" data-range="hour">Hour</button>
          <button class="btn btn-sm" data-range="day">Day</button>
          <button class="btn btn-sm" data-range="week">Week</button>
          <button class="btn btn-sm" data-range="month">Month</button>
          <button class="btn btn-sm" data-range="year">Year</button>
          <div class="ml-3 hidden items-center gap-2 md:flex">
            <span class="text-xs opacity-70">Scenario:</span>
            <button class="btn btn-sm btn-active" data-sim="stable">Stable</button>
            <button class="btn btn-sm" data-sim="failures">Failures</button>
          </div>
        </div>
      </div>

      <div id="chartWrap" class="relative rounded-lg border border-base-200 bg-base-100 p-3">
        <div id="statusChart" class="h-56 w-full"></div>
        <div class="mt-2 flex items-center justify-between text-xs opacity-70">
          <div class="flex items-center gap-2"><span class="inline-block h-2 w-2 rounded-sm bg-success"></span> No failures</div>
          <div class="flex items-center gap-2"><span class="inline-block h-2 w-2 rounded-sm bg-error"></span> Failures</div>
        </div>
      </div>
    </div>
  </div>

  <Spacer size={24} />

  <div class="grid grid-cols-1 gap-6 md:grid-cols-3">
    <div class="md:col-span-2">
      <div class="app-card">
        <div class="app-card-body">
          <h2 class="app-card-title">Service Disruptions Bulletin</h2>
          <div class="mt-3 space-y-3">
            {bulletins.map((B) => (
              <div class="rounded-lg border border-base-200 bg-base-100 p-3">
                <div class="flex items-center justify-between text-sm">
                  <div class="font-medium">{B.frontmatter.title}</div>
                  <span class={`badge ${badgeFor(B.frontmatter.status || '')} badge-field w-28 justify-center`}>{B.frontmatter.status}</span>
                </div>
                <div class="mt-1 text-xs opacity-70">{B.frontmatter.time || B.frontmatter.date}</div>
                <div class="prose prose-sm mt-2 max-w-none">
                  <B.Content />
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
    <div>
      <div class="app-card">
        <div class="app-card-body">
          <h2 class="app-card-title">Current Components</h2>
          <ul class="mt-2 space-y-2 text-sm">
            <li class="flex items-center justify-between"><span>API</span><span class="badge badge-success badge-field w-28 justify-center">Operational</span></li>
            <li class="flex items-center justify-between"><span>Control Panel</span><span class="badge badge-warning badge-field w-28 justify-center">Degraded</span></li>
            <li class="flex items-center justify-between"><span>Billing</span><span class="badge badge-success badge-field w-28 justify-center">Operational</span></li>
            <li class="flex items-center justify-between"><span>Notifications</span><span class="badge badge-success badge-field w-28 justify-center">Operational</span></li>
            <li class="flex items-center justify-between"><span>Object Storage</span><span class="badge badge-success badge-field w-28 justify-center">Operational</span></li>
          </ul>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
  <script is:inline>
    // ApexCharts bar chart with range + scenario + theme support
    const ranges = ['hour','day','week','month','year'];
    let current = 'hour';
    let scenario = 'stable';
    const chartEl = document.getElementById('statusChart');
    const rangeBtns = Array.from(document.querySelectorAll('button[data-range]'));
    const simBtns = Array.from(document.querySelectorAll('button[data-sim]'));

    const xLabels = {
      hour: Array.from({length:24}, (_,i)=> `${i}:00`),
      day: Array.from({length:30}, (_,i)=> `D${i+1}`),
      week: Array.from({length:12}, (_,i)=> `W${i+1}`),
      month: ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'],
      year: Array.from({length:5}, (_,i)=> `${new Date().getFullYear()-4+i}`),
    };
    function genValues(range, mode){
      const len = { hour:24, day:30, week:12, month:12, year:5 }[range];
      const vals = [];
      for (let i=0;i<len;i++){
        if (mode === 'stable') {
          const spike = Math.random() < (range==='hour'?0.06: range==='day'?0.08: range==='week'?0.12: range==='month'?0.15:0.2);
          vals.push(spike ? Math.floor(Math.random()*3)+1 : 0);
        } else {
          const fail = Math.random() < (range==='hour'?0.35: range==='day'?0.3: range==='week'?0.28: range==='month'?0.25:0.22);
          vals.push(fail ? Math.floor(Math.random()*6)+1 : 0);
        }
      }
      return vals;
    }
    function themeMode(){ return (document.documentElement.getAttribute('data-theme') === 'dark') ? 'dark' : 'light'; }

    let chart = null;
    function render(){
      if (!chartEl) return;
      const raw = genValues(current, scenario);
      const cats = xLabels[current];
      const displayed = raw.map(v => v === 0 ? 0.2 : v);
      const mode = themeMode();
      const fore = mode === 'dark' ? '#cbd5e1' : '#334155';
      const gridColor = mode === 'dark' ? 'rgba(148,163,184,0.20)' : 'rgba(148,163,184,0.25)';
      const opts = {
        chart: { type: 'bar', height: '100%', background: 'transparent', toolbar: { show: false } },
        plotOptions: { bar: { columnWidth: '60%', colors: { ranges: [ { from: 0, to: 0.21, color: '#16a34a' }, { from: 0.21, to: 999999, color: '#ef4444' } ] } } },
        dataLabels: { enabled: false },
        xaxis: { categories: cats, title: { text: 'Time' }, labels: { style: { colors: fore } }, axisBorder: { color: gridColor }, axisTicks: { color: gridColor } },
        yaxis: { title: { text: 'Failures' }, labels: { style: { colors: fore } } },
        grid: { borderColor: gridColor },
        tooltip: { theme: mode, y: { formatter: (val, { dataPointIndex }) => `${raw[dataPointIndex]} failure${raw[dataPointIndex]===1?'':'s'}` } },
        theme: { mode },
        series: [{ name: 'Failures', data: displayed }],
      };
      if (chart) { chart.updateOptions(opts, true, true); }
      else { chart = new ApexCharts(chartEl, opts); chart.render(); }
    }

    rangeBtns.forEach((b)=>{
      b.addEventListener('click', ()=>{
        rangeBtns.forEach(x=>x.classList.remove('btn-active'));
        b.classList.add('btn-active');
        current = b.getAttribute('data-range') || 'day';
        render();
      });
    });
    simBtns.forEach((b)=>{
      b.addEventListener('click', ()=>{
        simBtns.forEach(x=>x.classList.remove('btn-active'));
        b.classList.add('btn-active');
        scenario = b.getAttribute('data-sim') || 'stable';
        render();
      });
    });

    // react to theme changes
    const obs = new MutationObserver((muts)=>{ for (const m of muts) if (m.type==='attributes' && m.attributeName==='data-theme') render(); });
    obs.observe(document.documentElement, { attributes: true });

    render();
  </script>
</BaseLayout>
